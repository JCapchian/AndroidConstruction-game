//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/InputSystem/PlayerAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerAction"",
    ""maps"": [
        {
            ""name"": ""PlayerControls"",
            ""id"": ""de55eb15-4bbe-47fe-bb70-614ecd38cfe8"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""20a8b50c-3af1-4f05-ba5d-68737d956bed"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseMovement"",
                    ""type"": ""Button"",
                    ""id"": ""a222390d-70a5-47f3-8f60-1783a7d1461b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD Keys"",
                    ""id"": ""314226e8-293b-4a09-9f35-afb153b595ca"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5359c1e5-be79-4910-949b-864c488c39b2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""43cb999a-29cf-4820-b3fe-c7dca7eb6548"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b8a3b9d6-6b9f-4361-af75-8d2ca9091797"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""566fc33d-0856-406c-b1dc-4d6c33d64dae"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow Keys"",
                    ""id"": ""db2c00be-10f3-4aef-a408-0e1fb3e417af"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""ef8df37c-bcc1-4294-9bcb-c9f4b3981bde"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""23d33cdd-4352-4b98-847d-ffe2f4a43bf8"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""d6c8d0f4-1282-4514-91e2-6db68aa6f53a"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""02f921cc-c3f1-4fdb-ba42-44308ec5559d"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""41f86975-c884-46c4-a88b-0e7671a539c4"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""MouseMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Two Modifiers"",
                    ""id"": ""38bf5545-7153-4f01-9f9d-3e01dcf631c7"",
                    ""path"": ""TwoModifiers"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerInteractions"",
            ""id"": ""c360ae0f-e4e9-4b92-993f-89327e1e766f"",
            ""actions"": [
                {
                    ""name"": ""FireWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""c5fbb163-d118-4eab-bd8d-178b06e7d835"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Gun1"",
                    ""type"": ""Button"",
                    ""id"": ""997329ac-7a19-4f01-a6f1-eadc506d005f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Gun2"",
                    ""type"": ""Button"",
                    ""id"": ""8a25d570-0bf0-46cb-b16b-b20165889d7e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Gun3"",
                    ""type"": ""Button"",
                    ""id"": ""af555939-6957-4eb8-89a2-d88b0124368d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""7fa73998-0eaa-431c-b7f7-fb14fa44475f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ReloadGun"",
                    ""type"": ""Button"",
                    ""id"": ""328a8b21-65aa-4d82-8a39-9616ce4f89e5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PauseGame"",
                    ""type"": ""Button"",
                    ""id"": ""ced4bd21-62e0-411b-8b89-e37273e958f8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5fe07ed2-523f-4efa-b778-c3e961e42be6"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""FireWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b8528e26-ea99-4618-9b59-9e6e580103f0"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6531875-6168-40d3-9f2f-3d6285c28062"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""ReloadGun"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fd4b3c1c-c6f0-4c9b-aed1-e0b5fce71489"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f401373-6e84-401b-bdb7-c7fecc4bd096"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gun1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d75296a-d87b-41b5-97bb-1f631d20d3a5"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gun2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""84046620-8bdc-4a88-9239-08d06e3d73ff"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gun3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard and Mouse"",
            ""bindingGroup"": ""Keyboard and Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerControls
        m_PlayerControls = asset.FindActionMap("PlayerControls", throwIfNotFound: true);
        m_PlayerControls_Movement = m_PlayerControls.FindAction("Movement", throwIfNotFound: true);
        m_PlayerControls_MouseMovement = m_PlayerControls.FindAction("MouseMovement", throwIfNotFound: true);
        // PlayerInteractions
        m_PlayerInteractions = asset.FindActionMap("PlayerInteractions", throwIfNotFound: true);
        m_PlayerInteractions_FireWeapon = m_PlayerInteractions.FindAction("FireWeapon", throwIfNotFound: true);
        m_PlayerInteractions_Gun1 = m_PlayerInteractions.FindAction("Gun1", throwIfNotFound: true);
        m_PlayerInteractions_Gun2 = m_PlayerInteractions.FindAction("Gun2", throwIfNotFound: true);
        m_PlayerInteractions_Gun3 = m_PlayerInteractions.FindAction("Gun3", throwIfNotFound: true);
        m_PlayerInteractions_Interact = m_PlayerInteractions.FindAction("Interact", throwIfNotFound: true);
        m_PlayerInteractions_ReloadGun = m_PlayerInteractions.FindAction("ReloadGun", throwIfNotFound: true);
        m_PlayerInteractions_PauseGame = m_PlayerInteractions.FindAction("PauseGame", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerControls
    private readonly InputActionMap m_PlayerControls;
    private IPlayerControlsActions m_PlayerControlsActionsCallbackInterface;
    private readonly InputAction m_PlayerControls_Movement;
    private readonly InputAction m_PlayerControls_MouseMovement;
    public struct PlayerControlsActions
    {
        private @PlayerAction m_Wrapper;
        public PlayerControlsActions(@PlayerAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerControls_Movement;
        public InputAction @MouseMovement => m_Wrapper.m_PlayerControls_MouseMovement;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControlsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerControlsActions instance)
        {
            if (m_Wrapper.m_PlayerControlsActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnMovement;
                @MouseMovement.started -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnMouseMovement;
                @MouseMovement.performed -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnMouseMovement;
                @MouseMovement.canceled -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnMouseMovement;
            }
            m_Wrapper.m_PlayerControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @MouseMovement.started += instance.OnMouseMovement;
                @MouseMovement.performed += instance.OnMouseMovement;
                @MouseMovement.canceled += instance.OnMouseMovement;
            }
        }
    }
    public PlayerControlsActions @PlayerControls => new PlayerControlsActions(this);

    // PlayerInteractions
    private readonly InputActionMap m_PlayerInteractions;
    private IPlayerInteractionsActions m_PlayerInteractionsActionsCallbackInterface;
    private readonly InputAction m_PlayerInteractions_FireWeapon;
    private readonly InputAction m_PlayerInteractions_Gun1;
    private readonly InputAction m_PlayerInteractions_Gun2;
    private readonly InputAction m_PlayerInteractions_Gun3;
    private readonly InputAction m_PlayerInteractions_Interact;
    private readonly InputAction m_PlayerInteractions_ReloadGun;
    private readonly InputAction m_PlayerInteractions_PauseGame;
    public struct PlayerInteractionsActions
    {
        private @PlayerAction m_Wrapper;
        public PlayerInteractionsActions(@PlayerAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @FireWeapon => m_Wrapper.m_PlayerInteractions_FireWeapon;
        public InputAction @Gun1 => m_Wrapper.m_PlayerInteractions_Gun1;
        public InputAction @Gun2 => m_Wrapper.m_PlayerInteractions_Gun2;
        public InputAction @Gun3 => m_Wrapper.m_PlayerInteractions_Gun3;
        public InputAction @Interact => m_Wrapper.m_PlayerInteractions_Interact;
        public InputAction @ReloadGun => m_Wrapper.m_PlayerInteractions_ReloadGun;
        public InputAction @PauseGame => m_Wrapper.m_PlayerInteractions_PauseGame;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInteractions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInteractionsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerInteractionsActions instance)
        {
            if (m_Wrapper.m_PlayerInteractionsActionsCallbackInterface != null)
            {
                @FireWeapon.started -= m_Wrapper.m_PlayerInteractionsActionsCallbackInterface.OnFireWeapon;
                @FireWeapon.performed -= m_Wrapper.m_PlayerInteractionsActionsCallbackInterface.OnFireWeapon;
                @FireWeapon.canceled -= m_Wrapper.m_PlayerInteractionsActionsCallbackInterface.OnFireWeapon;
                @Gun1.started -= m_Wrapper.m_PlayerInteractionsActionsCallbackInterface.OnGun1;
                @Gun1.performed -= m_Wrapper.m_PlayerInteractionsActionsCallbackInterface.OnGun1;
                @Gun1.canceled -= m_Wrapper.m_PlayerInteractionsActionsCallbackInterface.OnGun1;
                @Gun2.started -= m_Wrapper.m_PlayerInteractionsActionsCallbackInterface.OnGun2;
                @Gun2.performed -= m_Wrapper.m_PlayerInteractionsActionsCallbackInterface.OnGun2;
                @Gun2.canceled -= m_Wrapper.m_PlayerInteractionsActionsCallbackInterface.OnGun2;
                @Gun3.started -= m_Wrapper.m_PlayerInteractionsActionsCallbackInterface.OnGun3;
                @Gun3.performed -= m_Wrapper.m_PlayerInteractionsActionsCallbackInterface.OnGun3;
                @Gun3.canceled -= m_Wrapper.m_PlayerInteractionsActionsCallbackInterface.OnGun3;
                @Interact.started -= m_Wrapper.m_PlayerInteractionsActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_PlayerInteractionsActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_PlayerInteractionsActionsCallbackInterface.OnInteract;
                @ReloadGun.started -= m_Wrapper.m_PlayerInteractionsActionsCallbackInterface.OnReloadGun;
                @ReloadGun.performed -= m_Wrapper.m_PlayerInteractionsActionsCallbackInterface.OnReloadGun;
                @ReloadGun.canceled -= m_Wrapper.m_PlayerInteractionsActionsCallbackInterface.OnReloadGun;
                @PauseGame.started -= m_Wrapper.m_PlayerInteractionsActionsCallbackInterface.OnPauseGame;
                @PauseGame.performed -= m_Wrapper.m_PlayerInteractionsActionsCallbackInterface.OnPauseGame;
                @PauseGame.canceled -= m_Wrapper.m_PlayerInteractionsActionsCallbackInterface.OnPauseGame;
            }
            m_Wrapper.m_PlayerInteractionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @FireWeapon.started += instance.OnFireWeapon;
                @FireWeapon.performed += instance.OnFireWeapon;
                @FireWeapon.canceled += instance.OnFireWeapon;
                @Gun1.started += instance.OnGun1;
                @Gun1.performed += instance.OnGun1;
                @Gun1.canceled += instance.OnGun1;
                @Gun2.started += instance.OnGun2;
                @Gun2.performed += instance.OnGun2;
                @Gun2.canceled += instance.OnGun2;
                @Gun3.started += instance.OnGun3;
                @Gun3.performed += instance.OnGun3;
                @Gun3.canceled += instance.OnGun3;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @ReloadGun.started += instance.OnReloadGun;
                @ReloadGun.performed += instance.OnReloadGun;
                @ReloadGun.canceled += instance.OnReloadGun;
                @PauseGame.started += instance.OnPauseGame;
                @PauseGame.performed += instance.OnPauseGame;
                @PauseGame.canceled += instance.OnPauseGame;
            }
        }
    }
    public PlayerInteractionsActions @PlayerInteractions => new PlayerInteractionsActions(this);
    private int m_KeyboardandMouseSchemeIndex = -1;
    public InputControlScheme KeyboardandMouseScheme
    {
        get
        {
            if (m_KeyboardandMouseSchemeIndex == -1) m_KeyboardandMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard and Mouse");
            return asset.controlSchemes[m_KeyboardandMouseSchemeIndex];
        }
    }
    public interface IPlayerControlsActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnMouseMovement(InputAction.CallbackContext context);
    }
    public interface IPlayerInteractionsActions
    {
        void OnFireWeapon(InputAction.CallbackContext context);
        void OnGun1(InputAction.CallbackContext context);
        void OnGun2(InputAction.CallbackContext context);
        void OnGun3(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnReloadGun(InputAction.CallbackContext context);
        void OnPauseGame(InputAction.CallbackContext context);
    }
}
